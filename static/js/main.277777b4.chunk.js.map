{"version":3,"sources":["logo.svg","Config/RootProvider.jsx","Components/EnterCity.jsx","Components/CityList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","appContext","createContext","RootProvider","state","enterTypePayloadInState","type","payload","_this","setState","Object","defineProperty","react_default","a","createElement","Provider","value","this","action","props","children","Component","EnterCity","_useState","useState","_useState2","slicedToArray","selectedCity","setSelectedCity","_useState3","_useState4","optionData","setOptionData","_useState5","_useState6","isLoading","setIsLoading","context","useContext","cityTextChange","text","_headers","axios","method","mode","url","headers","Access-Control-Allow-Origin","then","response","city_arr","data","map","city","push","label","catch","error","console","log","useEffect","style","marginTop","margin","react_select_esm","isClearable","onInputChange","onChange","placeholder","options","onClick","trim","my_cities","cities","backgroundColor","width","height","color","fontSize","border","borderRadius","CityList","Consumer","index","key","App","Config_RootProvider","className","Components_EnterCity","Components_CityList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.277777b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , {Component , createContext} from 'react';\n\nexport const appContext = createContext();\n\nclass RootProvider extends Component{\n    state = {};\n\n    enterTypePayloadInState = (type , payload)=>{\n        this.setState({\n            [type]: payload\n        })\n    }\n\n    render(){\n        return(\n            <appContext.Provider value = {{\n                state: this.state,\n                action: {enterTypePayloadInState: this.enterTypePayloadInState}\n            }}>\n                {this.props.children}\n            </appContext.Provider>\n        )\n    }\n}\n\nexport default RootProvider","import React , {useState , useContext , useEffect} from 'react'\nimport Select from 'react-select'\nimport {appContext} from '../Config/RootProvider'\nimport axios from 'axios'\n\nfunction EnterCity(props){\n\n    const [selectedCity , setSelectedCity] = useState('');\n    const [optionData , setOptionData] = useState([]);\n    const [isLoading , setIsLoading] = useState(false);\n    const context = useContext(appContext);\n    \n\n    function submitCity(){        \n        if(selectedCity.trim() != \"\"){\n            //add the city into the root store            \n            let my_cities = context.state.cities?context.state.cities:[]            \n            my_cities.push(selectedCity)\n            context.action.enterTypePayloadInState('cities' , my_cities);\n        }\n    }\n\n    useEffect(()=>{\n        //any changes you want to handle when hook is updated do here\n    })\n\n    function cityTextChange(text){     \n        setIsLoading(true)             \n        axios(\n            {\n                method:'GET',\n                mode: 'no-cors',            \n                url: \"https://cors-anywhere.herokuapp.com/http://gd.geobytes.com/AutoCompleteCity?q=\"+text,\n                headers: {\n                    \"Access-Control-Allow-Origin\": \"*\",\n                    \"Access-Control-Allow-Origin\": \"GET\",\n                    \"Access-Control-Allow-Origin\": \"http://localhost:3000/\",\n                    \"crossorigin\": true,\n                    'Content-Type': 'application/json',\n                    'withCredentials': true,\n                    'credentials': 'same-origin',\n                  },\n                \n            }).then(response=>{\n                let city_arr = []                \n                response.data.map(city=>{\n                    if(city!=\"%s\"){\n                        city_arr.push({value: city , label: city});        \n                    }\n                })\n                setOptionData(city_arr)\n                setIsLoading(false)\n        }).catch(error=>{\n            //oooppps handle the error\n            console.log(error)\n        })\n    }    \n\n    return(\n        <div style = {{marginTop: '10px'}}>\n            <h2>Welcome to demo of react hooks and context api</h2>\n            <div style= {{margin:'0px 80px 0px 80px'}}>\n                {true && <Select isLoading={isLoading} isClearable onInputChange={(text)=>{cityTextChange(text)}} onChange = {(city)=>{setSelectedCity(city ? city.value : '')}} placeholder={\"Select City\"} options = {optionData}></Select>}\n                {\n                 false && <input type = \"text\" onChange= {(event)=>{cityTextChange(event.target.value)}}></input>\n                }\n            </div>\n            <button onClick = {submitCity} style={{marginTop: '10px',backgroundColor: '#18a1e2',width: '100px',height: '40px',color: 'white',fontSize: '20px',border: '0px',borderRadius: '5px'}}>Submit</button>\n        </div>\n    )\n}\n\nexport default EnterCity","import React , {useState , useEffect } from 'react';\nimport {appContext} from '../Config/RootProvider.jsx'\n\nfunction CityList(props){    \n    return(\n        <div>\n            <h4>Here are the list of cities you selected</h4>\n            <appContext.Consumer>\n                {\n                    (value)=>{\n                        return(\n                            <div>\n                                {\n                                    value.state.cities && \n                                    value.state.cities.map((city , index)=>{\n                                        return(<h5 key = {index}>{city}</h5>)\n                                    }) \n                                }\n                            </div>\n                        )\n                    }\n                }\n            </appContext.Consumer>\n        </div>\n    )\n}\n\nexport default CityList","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EnterCity from './Components/EnterCity.jsx'\nimport CityList from './Components/CityList.jsx'\nimport {appContext}  from './Config/RootProvider'\nimport RootProvider from './Config/RootProvider'\n\nclass App extends Component {\n  render() {\n    return (\n      <RootProvider>\n        <div className=\"App\">\n          <EnterCity />\n          <CityList />\n        </div>\n      </RootProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}